import { OnInit, OnChanges, EventEmitter, SimpleChanges, TemplateRef, OnDestroy, AfterViewInit, NgZone } from '@angular/core';
import { SwiperComponent } from 'swiper/angular';
import { ICalendarComponent, IEvent, IMonthView, IMonthViewRow, ITimeSelected, IRange, CalendarMode, IDateFormatter, IMonthViewDisplayEventTemplateContext } from './calendar.interface';
import { CalendarService } from './calendar.service';
import * as i0 from "@angular/core";
export declare class MonthViewComponent implements ICalendarComponent, OnInit, OnDestroy, OnChanges, AfterViewInit {
    private calendarService;
    private zone;
    constructor(calendarService: CalendarService, zone: NgZone);
    slider: SwiperComponent;
    monthviewDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewInactiveDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewEventDetailTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    formatDay?: string;
    formatDayHeader?: string;
    formatMonthTitle?: string;
    eventSource: IEvent[];
    startingDayMonth: number;
    showEventDetail?: boolean;
    noEventsLabel?: string;
    autoSelect: boolean;
    markDisabled?: (date: Date) => boolean;
    locale: string;
    dateFormatter?: IDateFormatter;
    dir: string;
    lockSwipeToPrev?: boolean;
    lockSwipeToNext?: boolean;
    lockSwipes?: boolean;
    sliderOptions: any;
    onRangeChanged: EventEmitter<IRange>;
    onEventSelected: EventEmitter<IEvent>;
    onTimeSelected: EventEmitter<ITimeSelected>;
    onTitleChanged: EventEmitter<string>;
    views: IMonthView[];
    currentViewIndex: number;
    selectedDate?: IMonthViewRow;
    range: IRange;
    mode: CalendarMode;
    direction: number;
    private moveOnSelected;
    private inited;
    private callbackOnInit;
    private currentDateChangedFromParentSubscription?;
    private eventSourceChangedSubscription?;
    private slideChangedSubscription?;
    private slideUpdatedSubscription?;
    private formatDayLabel;
    private formatDayHeaderLabel;
    private formatTitle;
    static getDates(startDate: Date, n: number): Date[];
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    setSwiperInstance(swiper: any): void;
    onSlideChanged(): void;
    move(direction: number): void;
    createDateObject(date: Date): IMonthViewRow;
    getViewData(startTime: Date): IMonthView;
    getHighlightClass(date: IMonthViewRow): string;
    getRange(currentDate: Date): IRange;
    onDataLoaded(): void;
    refreshView(): void;
    getTitle(): string;
    private compareEvent;
    select(viewDate: IMonthViewRow): void;
    slideView(direction: number): void;
    updateCurrentView(currentViewStartDate: Date, view: IMonthView): void;
    eventSelected(event: IEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MonthViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MonthViewComponent, "monthview", never, { "monthviewDisplayEventTemplate": "monthviewDisplayEventTemplate"; "monthviewInactiveDisplayEventTemplate": "monthviewInactiveDisplayEventTemplate"; "monthviewEventDetailTemplate": "monthviewEventDetailTemplate"; "formatDay": "formatDay"; "formatDayHeader": "formatDayHeader"; "formatMonthTitle": "formatMonthTitle"; "eventSource": "eventSource"; "startingDayMonth": "startingDayMonth"; "showEventDetail": "showEventDetail"; "noEventsLabel": "noEventsLabel"; "autoSelect": "autoSelect"; "markDisabled": "markDisabled"; "locale": "locale"; "dateFormatter": "dateFormatter"; "dir": "dir"; "lockSwipeToPrev": "lockSwipeToPrev"; "lockSwipeToNext": "lockSwipeToNext"; "lockSwipes": "lockSwipes"; "sliderOptions": "sliderOptions"; }, { "onRangeChanged": "onRangeChanged"; "onEventSelected": "onEventSelected"; "onTimeSelected": "onTimeSelected"; "onTitleChanged": "onTitleChanged"; }, never, never, false, never>;
}
